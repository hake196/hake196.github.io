{"meta":{"title":"hanke196","subtitle":null,"description":null,"author":"hanke196","url":"https://hake196.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-09-23T03:09:37.520Z","updated":"2019-09-23T03:09:37.520Z","comments":true,"path":"about/index.html","permalink":"https://hake196.github.io/about/index.html","excerpt":"","text":"本人喜欢听音乐,喜欢打游戏,就这样 2019年真的活得太难了 求求上天安排下 拜托了🙏"},{"title":"所有分类","date":"2019-09-23T03:09:37.520Z","updated":"2019-09-23T03:09:37.520Z","comments":true,"path":"categories/index.html","permalink":"https://hake196.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-09-23T01:33:21.772Z","updated":"2019-09-23T01:33:21.772Z","comments":true,"path":"tags/index.html","permalink":"https://hake196.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-09-23T01:10:36.215Z","updated":"2019-09-23T01:10:36.216Z","comments":true,"path":"mylist/index.html","permalink":"https://hake196.github.io/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"W模型的优缺点","slug":"W模型的优缺点","date":"2019-09-28T14:26:42.000Z","updated":"2019-09-28T14:26:42.996Z","comments":true,"path":"2019/09/28/W模型的优缺点/","link":"","permalink":"https://hake196.github.io/2019/09/28/W模型的优缺点/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"代码审查","date":"2019-09-24T14:49:55.191Z","updated":"2019-09-28T15:57:24.929Z","comments":true,"path":"2019/09/24/代码审查/","link":"","permalink":"https://hake196.github.io/2019/09/24/代码审查/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"算法刷题网站","slug":"算法刷题网站","date":"2019-09-23T08:49:59.000Z","updated":"2019-09-23T14:03:17.581Z","comments":true,"path":"2019/09/23/算法刷题网站/","link":"","permalink":"https://hake196.github.io/2019/09/23/算法刷题网站/","excerpt":"","text":"算法刷题网站 洛谷 目前在刷的网站,网站加载真慢😓 leetcode 算法网站总结https://blog.csdn.net/p312011150/article/details/81911024 一个ACMer的感想,大佬牛逼https://www.singularity2u.top/2019/06/13/2018-2019-%E5%A4%A7%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%80%BB%E7%BB%93/","categories":[{"name":"算法训练","slug":"算法训练","permalink":"https://hake196.github.io/categories/算法训练/"}],"tags":[{"name":"算法训练","slug":"算法训练","permalink":"https://hake196.github.io/tags/算法训练/"}]},{"title":"Java开源项目9.23","slug":"Java开源项目2019.9.23","date":"2019-09-23T06:40:29.000Z","updated":"2019-09-23T07:20:30.033Z","comments":true,"path":"2019/09/23/Java开源项目2019.9.23/","link":"","permalink":"https://hake196.github.io/2019/09/23/Java开源项目2019.9.23/","excerpt":"","text":"java开源项目 halo hutool piggymetrice HanlLP Spring-Boot-In-Action","categories":[{"name":"java","slug":"java","permalink":"https://hake196.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hake196.github.io/tags/java/"}]},{"title":"开源前端UI框架","slug":"开源前端UI框架","date":"2019-09-23T00:56:35.000Z","updated":"2019-09-23T01:05:06.583Z","comments":true,"path":"2019/09/23/开源前端UI框架/","link":"","permalink":"https://hake196.github.io/2019/09/23/开源前端UI框架/","excerpt":"","text":"开源前端UI框架1.layui2.AdminLTE3.vue-Element-Admin4.tabler5.Gentelella6.ng2-admin7.ant-desgin-pro8.blur-admin9.vue-admin10.iview-admin11.material-dashboard","categories":[{"name":"水文一篇","slug":"水文一篇","permalink":"https://hake196.github.io/categories/水文一篇/"}],"tags":[{"name":"水文一篇","slug":"水文一篇","permalink":"https://hake196.github.io/tags/水文一篇/"}]},{"title":"好文收藏9.21","slug":"好文收藏9-21","date":"2019-09-21T08:34:27.000Z","updated":"2019-09-28T15:57:28.895Z","comments":true,"path":"2019/09/21/好文收藏9-21/","link":"","permalink":"https://hake196.github.io/2019/09/21/好文收藏9-21/","excerpt":"","text":"好文收藏9.21(npm环境配置,hexo安装流程)使用hexo+github搭建免费个人博客详细教程 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html hexo官方网站 https://hexo.io/zh-cn/ nodejs、npm 环境配置步骤(windows版本) https://juejin.im/post/5a92b735f265da4e761fea22","categories":[{"name":"好文收藏","slug":"好文收藏","permalink":"https://hake196.github.io/categories/好文收藏/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://hake196.github.io/tags/npm/"},{"name":"hexo","slug":"hexo","permalink":"https://hake196.github.io/tags/hexo/"}]},{"title":"软件工程和V模型","slug":"软件工程和V模型","date":"2019-09-20T13:25:51.000Z","updated":"2019-09-28T16:44:28.906Z","comments":true,"path":"2019/09/20/软件工程和V模型/","link":"","permalink":"https://hake196.github.io/2019/09/20/软件工程和V模型/","excerpt":"","text":"软件工程和V模型软件开发过程模型 在软件开发的几十年实践中，人们总结了很多软件开发模型用来描述和表示一个复杂的开发过程，如： 瀑布模型 快速原型模型 螺旋模型 软件测试与软件的开发模式有着紧密的联系，作为一名测试人员，应该充分理解软件的开发模式，以便找准自己在其中的位置，从而发挥自身的价值. 瀑布模型 是线性模型的一种,在所有模型中占有重要地位,是所有其他模型的一个基础. 每个阶段执行一次,按线性顺序进行软件开发. 瀑布模型各阶段详细解读： 1.需求分析 开发的过程需要分析,想好我们要做什么. 2.设计 把需求分析好之后,设计出一个设计稿(UI设计稿),做出所谓的模型、图片 3.编码 把ui设计师设计的设计稿做成代码,就是所谓的编码工作 4.实现 写代码实现最终结果（功能） 5.测试工程师的切入点(有了代码实现之后,切入点就是实现的那一步) 软件测试》完成》维护这个过程中,还有个用户的需求发生变更的小插曲,所以测试工程师的工作还有个小的循环迭代. 测试的切入点： 测试阶段处于软件实现后,必须在代码完成后留出足够的时间给测试活动,否则将导致测试不充分,很多问题到项目后期才暴露 瀑布模型的缺点: 瀑布模型不好地方在于,测试人员在测试阶段时,编码已经完成了.如果有些问题(如需求模糊，没有搞清楚)在编码之前没有改好，在测试阶段才发现，程序改动会很容易出现问题(bug),因为软件中有许多模块，而各模块之间联系紧密(模块之间相互影响、相互制约) 瀑布模型总结： 优点： 1.开发的各个阶段比较清晰 2.强调早期计划及需求调查 3.适合需求稳定的产品开发 缺点： 简单来说,就是不灵活 1.依赖于早期的需求调查,不适合需求的变化 2.单一流程不可逆 3.风险往往延至后期才显露,失去尽早纠正的机会. 4.问题在项目后期才开始暴露. 5.前面未发现的错误会传递并扩散,到后面的阶段,可能导致项目失败 改良： 沿用瀑布模型的线性思想,细化了各个阶段,在某些重要的阶段之间掺入迭代的思想. 软件测试&amp;软件工程 软件测试与软件工程息息相关,软件测试是软件工程组成中不可或缺的一部分. 在软件工程、项目管理、质量管理得到规范化应用的企业,软件测试也会进行得比较顺利,软件测试发挥的价值也会更大. 也就是说在企业中,如果你的项目管理特别规范化,那么整个软件的工程进行会更加的顺利 要关注软件工程、质量管理以及配置管理与软件测试的关系;在不同的开发模式下,如何进行软件测试. 开发模式有瀑布型、螺旋型、迭代型、快速型等等模型,各种模型有各自优缺点.瀑布型在软件开发中最为常用,虽然存在缺点,但软件工程的管理者在此模型基础上进行了改良变更,发明了快速开发模型,更好地适应需求频繁更变的情况 ❗ 补充 敏捷型开发模型： 只要有需求分析的过程,就邀请用户(客户)过来,一起讨论分析需求的合理性.在设计阶段完成后,把用户、程序员、测试工程师叫在一起开个会,看看需求分析、设计的工作是否满足需求,考虑下测试时候，现在的设计会不会在以后发生什么情况(如：需求不符合用户要求),进行小型的迭代更新 测试模型随着测试过程的管理和发展,测试人员通过大量的实践,从而总结出了不少测试模型,如常见的V模型、W模型、H模型等.这些模型与开发紧密结合,对测试活动进行了抽象,成为了测试过程管理的重要参考依据. ❓ 测试的过程和软件开发的过程一样吗？是否有很多看上去很专业,似乎很有内涵的模型呢？ V模型 V模型是具有代表意义的测试模型,旨在改进软件开发的效率和效果; V模型推出之前,人们通常把测试过程作为在需求分析、概要设计、详细设计、编码全部完成之后的一个阶段,尽管当时已经出现了测试工作会占用这个项目周期一半的时间,但是大多数人认为测试只是一个收尾工作;V模型在这个时候推出,就是为了改变之前行业的普遍认识. V模型本身是软件开发中瀑布模型的变种,它反映了测试活动与分析和设计的关系. V模型标明了测试过程中本身存在的不同阶段,从左到右,描述了开发过程和测试过程的阶段对应关系. V模型的剖析开发阶段(V的左边) 需求分析 用户需求、业务需求、需求规格说明书(需求文档) 1.软件开发之前,一定要进行分析(包括用户需求、业务需求).用户需求和业务需求都了解之后,把它们都总结好写入文档(就是规格说明书),让用户签字确认 概要设计 系统架构、模块划分、模块与模块之间的接口 1.系统架构:看采用的是B/S结构(浏览器/服务器)还是C/S(客户端/服务端)结构; 2.模块划分:例如bilibili网站中有音频区啊、鬼畜区啊等等,这些就划分成了一个个小小的模块; 3.模块与模块之间的接口:例如一个购物网站,当你在没有登录账号的情况下,想完成一个点击收藏的动作,购物网站会跳转到用户登录的模块提示的登录. 详细设计 模块内部实现的逻辑和方法 1.例如一个使用微信过程,当用户成功登录后,选择好友,在输入框输入文字或者图片,发送成功.这个过程就是逻辑. 编码 实现上面的设计 1.代码实现上面的设计 测试阶段(V的右边) 单元测试 又称模块测试,针对软件设计中的最小单位—程序模块,进行正确性检查的测试工作.单元测试需要从程序的内部结构出发设计测试用例.多个模块可以平行地独立进行单元测试.检测代码的开发是否符合详细设计的要求. 单元定义:C中指一个函数,java中指一个类,在图形化的软件中,单元一般指一个窗口,1个菜单.例一个购物网站：首页、购物列表、购物详情页、购物列表页等等 集成测试 又叫组装测试,通常在单元测试的基础上,将所有程序模块进行有序的、递增的测试.重点测试不同模块的接口部分(就是把单元测试拼在一起来测试).检测此前测试的各组成部分能完好地结合在一起. 系统测试 就是把你整个软件的整体流程，一整套流程(整体流程)全测完.不是字面意思把软件放在windows、macos 系统测试.检测已集成在一起的产品是否符合系统规格说明书的要求 验收测试 检测产品是否符合最终用户的需求. ❓ 为什么单元测试完了,又要进行集成测试 app中的每个模块都是互相联系的,单一模块测试可能没有问题,但是各模块连在一起测试就有可能会出错. V模型的优点开发V模型即包含了底层测试又包含了高层测试 底层测试：检验源代码质量的测试,如：单元测试; 高层测试：检验整个系统的需要,如：系统测试; V模型清除地标识出了软件开发的阶段. ![清晰的软件开发流程](https://cdn.jsdelivr.net/gh/hake196/My_imghome/ke196/2019092419451xx.png) 它采用自顶向下逐步求精的方式把整个开发过程分成不同的阶段,每个阶段的工作都很明确,因此便于控制开发过程.当所有的阶段都完成之后,该软件的开发过程也随之结束 V模型的缺点 V模型一大缺点正是自身的顺序性所导致.到了测试阶段,程序已经完成,错误已经产生,很多前期的错误一直到测试阶段才发现,甚至无法发现,往往不好改或者无从修改了(思考下程序写好了,各模块关联度高的情况下修改代码的蛋疼时刻😱) 同时实际的开发过程中,在需求阶段很难把用户的需求完全明确下来,同时,当需求变更时将会导致阶段反复,而且都要重复需求、设计、编码、设计、编码、测试等过程,返工量非常大,模型灵活性比较低. (使用了这种V模型开发了)在需求分析阶段没有把用户需求挖掘完美(产品经理跟用户直接对接),又或者产品经理没有把用户需求直接拿捏的准确,就会导致需求分析这阶段没做好(需求分析不到位)、概要分析、详细设计等等这些东西没做好,等到做测试阶段了,用户却发现你这程序缺这缺那的,结果你就往要完成的程序中加东西.加东西又要经过上面的步骤(V模型的步骤重来)：需求分析》概要设计》详细设计……，时间、工作量增加,太难了,不够灵活. 如果在V模型的模型基础上，进行小的敏捷型迭代工作的话：遇到需求有问题的话,那么我们就随时随地的改。改的越早就相当于需求变更的频繁,需求变更的越频繁,后期出现的问题就小一些。(这就是根据V模型的敏捷型改进) 虽然V模型的确灵活度较低,但实际工作当中一定会进行一些小的产品迭代的.还有一个情况就是,在一开始时，进行需求分析、概要设计、详细设计等等阶段都要给用户确认,用户觉得不行就会随时随地的进行修改，这才是我们最想得到完美结果.","categories":[{"name":"测试理论","slug":"测试理论","permalink":"https://hake196.github.io/categories/测试理论/"}],"tags":[{"name":"测试理论","slug":"测试理论","permalink":"https://hake196.github.io/tags/测试理论/"}]},{"title":"软件测试的原则(二)","slug":"软件测试的原则-二","date":"2019-09-19T11:57:17.000Z","updated":"2019-09-28T15:36:49.187Z","comments":true,"path":"2019/09/19/软件测试的原则-二/","link":"","permalink":"https://hake196.github.io/2019/09/19/软件测试的原则-二/","excerpt":"","text":"软件测试的原则(详细解读)所有的测试都应追溯到用户需求比如各个视频网站的一个点击视频暂停的功能,功能理想的实现是点击视频暂停按钮时视频就会立马暂停，但所谓这样的视频暂停功能仅仅是我们理想的样子，客户可能需要的是暂停视频时就会跳出广告，客户的真正的想法是暂停视频时会有贴片广告，所以所有的测试都应追溯到用户的需求 ![广告](https://cdn.jsdelivr.net/gh/hake196/My_imghome/ke196/20190919210001.png) 应当把“尽早和不断地测试”作为座右铭尽早:我们测试记录的活动越早,我们发现问题就越早，修改难度就会降的越低,但越早进入测试，花费的时间、人力、金钱也会上升,所以要和部门商量并解决 不断:开发的团队就算平均每个成员的水平都很高，但写出来的程序还会存在bug,所以要不断的测试 测试工作应该由独立的专业测试机构来完成程序员也可以自己测试自己开发的程序，但是个人有限，总会有些测试点没有测试到这么全面、到位，软件质量不能保证，所以专业人做专业的事,测试的工作就可以让测试人员来测(大型的公司一般都会分工明确) Pareto原则,测试发现的错误中80%很可能起源于20%的模块中测试发现的bug中80%很有可能来源于20%的模块中，这可以引入二八定律。就是出问题的模块不一定bug是均等的，bug有可能就出现在开发比较新的、陌生的20%的模块当中 设计测试用例时,应该考虑各种情况测试用例就是测什么东西？怎么测？应该把各种情况准备好，比如：软件问题、用户自身的问题、硬件问题等等…… 对测试出的错误结果一定要有一个确认的过程(描述缺陷报告)我们在做测试工作的时候，找到了bug等问题后，一定要做一个问题的描述，就是确认的过程.缺陷报告也就是错误报告，要用文字加图片的形式描述清楚.只有问题描述清楚了，程序员才能更快、更好的定位bug，方便改正bug,有利于提高软件的质量 制定严格的测试计划为防止工期延误，必须制定一个计划，并且这个计划要严格执行，计划多少阶段，什么时候完成一个阶段，一个阶段要完成什么工作，重要的安排多少人去完成什么工作 完全测试是不可能的,测试需要终止比如我们做一款软件，是不可能一直测一直测，测到没有bug为止的。真正的软件工程的不是这样子的，我们完全测试到一点bug都没有是几乎不会发生的，测试的工作一定要终止.一般项目的工期都会有前、中、后的阶段，最后还有个项目整理阶段(或改错阶段)。按阶段工作，如前期工作整理好需求文档，需求文档对接一下，看看是否满足客户的需求，弄明白需求。中期的话，用户过来确认完成的阶段，给用户出一个半成品(demo)看一看。到最后产品上线之前肯定要有一个大的测试版本，这个版本也不是要做的太完美，工期短也没办法完成的这么完美.万一工期一到还有问题、错误的话,看情况处理。问题、错误不影响最终产品的上线、不影响核心的功能,可以往后拖。大家都知道，软件有各种版本，有1.1、1.2、2.3版本存在，每个版本更新也算一个个小工期，可以订下版本大版本号更新什么、小版本号更新什么。(1.0到2.0为大版本新功能更新(大功能迭代),1.1到1.2为小版本bug修复更新(小版本迭代) 注意回归测试的关联性.回归测试：指修改了旧代码后,重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。程序员将测试员提供的bug修改完后，这个bug还要给测试员重新测试。验证下这个bug是否已经解决了，有没有引发其他模块产生问题。程序中的若干模块都有关联的，有可能出现修改好bug后会引发其他模块产生新的bug 妥善保存一切测试过程文档软件工程的特点就是需求更改的比较频繁,测试过后记录的文档一定会有问题(当需求改了，前测试记录的东西就不适合了)，要随着版本(需求)的更新而更新.测试文档更新要保留前测试文档，然后复制前文档后更改名字就行。这样可以应对当更改需求不合适了，还可以根据前版本的测试文档返回软件的版本 参考资料(复读机源头)： 👉 https://www.bilibili.com/video/av20159145?t=299&amp;p=2","categories":[{"name":"测试理论","slug":"测试理论","permalink":"https://hake196.github.io/categories/测试理论/"}],"tags":[{"name":"自动化测试","slug":"自动化测试","permalink":"https://hake196.github.io/tags/自动化测试/"},{"name":"测试理论","slug":"测试理论","permalink":"https://hake196.github.io/tags/测试理论/"}]},{"title":"docker环境搭建","slug":"docker环境搭建","date":"2019-09-17T15:09:51.000Z","updated":"2019-09-22T01:05:17.623Z","comments":true,"path":"2019/09/17/docker环境搭建/","link":"","permalink":"https://hake196.github.io/2019/09/17/docker环境搭建/","excerpt":"","text":"Docker环境搭建安装平台：虚拟机win7 x64 虚拟机准备工作: 网络设置为桥接 虚拟机打开虚拟化技术(要在win7虚拟机打开前开启,否则会像下面呈不可选状态) 虚拟机安装win7 到阿里云镜像下载Docker Toolbox,选择安装包(我选了日期最后的那个) 双击安装包,安装目录自己安排 安装期间一路点击下一步,安装完成后桌面会出现三个图标 打开Docker QuickStart……图标,终端会一直卡在GitHub上,这是因为终端会到docker官方的github仓库去获取Boot2docker最新的版本 原因和墙有关系,终端也有可能因为与github连接超时而报错 解决办法1：(在我虚拟机没用) 关闭docker终端,将电脑网络断开 进入docker toolbox的安装目录复制一份boot2docker 将boot2docker文件放到用户的.docker\\machine\\cache目录中,a2634是我win7的账号名(记得先清除cache目录的文件再放入boot2……文件) (此.docker目录一定要打开一次docker quickstart才能生成) C:\\Users\\a2634.docker\\machine\\cache 双击打开docker qiuckstart……图标,随意敲击回车 又有出现意外了,终端出现以下错误: 不用怕,轻敲回车自动关闭终端,然后接着重新打开docker quickstart……,等终端跑出了Creating SSH key……字样后,赶紧的重新让虚拟机连接网络. 解决方法2： 可以行得通,但时间慢 方法步骤： 使用站长工具ping测速工具,找github.com延迟最低的ip 将找到的ip放入host文件中的最后一行并保存 1140.82.118.4 github.com boot2docker文件下载速度快了点,但还是差不多用2、3个小时才能下载完(不一定这个时间能下完,看网络情况吧). 解决方法3： 最最可靠,挂梯子吧 幸运的是,用第一种方法成功了,终端出现了鲸鱼的图案 跑下命令docker run hello-world,测试结束.docker可以使用了. 可喜可贺,可喜可贺🎉🎉🎉 参考资料： https://www.runoob.com/docker/windows-docker-install.html https://www.cnblogs.com/CodeOcean/p/10923066.html https://blog.csdn.net/jiangjingxuan/article/details/54908272 https://blog.csdn.net/weixin_41430952/article/details/83745458","categories":[{"name":"docker","slug":"docker","permalink":"https://hake196.github.io/categories/docker/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://hake196.github.io/tags/环境搭建/"},{"name":"docker","slug":"docker","permalink":"https://hake196.github.io/tags/docker/"}]},{"title":"测试目的和原则","slug":"测试目的和原则","date":"2019-09-17T08:35:59.000Z","updated":"2019-09-28T15:57:28.894Z","comments":true,"path":"2019/09/17/测试目的和原则/","link":"","permalink":"https://hake196.github.io/2019/09/17/测试目的和原则/","excerpt":"","text":"测试的目的： 是想以最少的人力,物力和时间找出软件中潜在的各种错误与缺陷,通过修正各种错误和缺陷提高软件质量,回避软件发布后由于潜在的软件缺陷和错误造成的隐患以及带来的商业风险。 测试的定义： 使用人工和自动手段来运行或测试某个系统的过程,其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别 软件测试的原则1。所有的测试都应追溯到用户需求（视频网站,点击后最大化） 2。应当把“尽早和不断地测试”作为座右铭 3。测试工作应该由独立的专业的软件测试机构来完成 4。Pareto原则,测试发现的错误中80%很可能起源于20%的模块中。 5。设计测试用例(测什么,怎么测？)时,应该考虑各种情况。 6。对测试出的错误结果一定要有一个确认的过程(描述缺陷报告)。 7。制定严格的测试计划 8。完全测试是不可能的,测试需要终止。 9。注意回归测试的关联性。 回归测试,指修改了旧代码后,重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误 10。妥善保存一切测试过程文档。 参考资料: https://www。bilibili。com/video/av20159145?t=291&amp;p=2","categories":[{"name":"测试理论","slug":"测试理论","permalink":"https://hake196.github.io/categories/测试理论/"}],"tags":[{"name":"自动化测试","slug":"自动化测试","permalink":"https://hake196.github.io/tags/自动化测试/"},{"name":"测试理论","slug":"测试理论","permalink":"https://hake196.github.io/tags/测试理论/"}]},{"title":"Flutter开发环境搭建","slug":"Flutter环境搭建","date":"2019-09-15T14:09:58.000Z","updated":"2019-09-16T04:10:16.862Z","comments":true,"path":"2019/09/15/Flutter环境搭建/","link":"","permalink":"https://hake196.github.io/2019/09/15/Flutter环境搭建/","excerpt":"","text":"Flutter环境搭建环境搭建前提: Java Sdk Android Sdk Android Studio安装与配置前往官网下载gradle将gradle的bin目录放入环境变量 下载Android Studio,并配置好gradle、Android Sdk目录(指：在Android Studio中配置好) 安装好flutter插件,重启AS(Dart插件会随着flutter插件安装的)现在可以创建flutter项目了,但还不行，需要配置flutter环境 Flutter Sdk安装与环境变量设置前往官网下载Flutter Sdk,选择Stable channel(稳定)版本 解压Flutter Sdk,并配置环境变量 将Flutter Sdk安装目录里的bin目录添加到环境变量就可以了 使用flutter doctor命令检查flutter环境打勾✔是没有问题的,感叹号❗就需要注意了 ❗ Android licese status unknown.(没有许可证) 运行以下命令,安装过程一路输入字母y 1flutter doctor --android-licenses ⛔ 意外的是,当我运行以上命令时,cmd提示解决办法：cmd切换到D:\\E\\android-sdk\\tools\\bin目录下,即你Android SDK目录\\tools\\bin的路径,输入sdkmanager --update命令 ⛔ 但执行上一条命令又又又报错了,网友说这是没有给Android Sdk许可证结果还是不能用,重新安装Android Sdk吧 想了下,Android Studio都还没装,用什么flutter…😐,装好Android Studio后,加上Flutter插件,下面的错误修复了 [√] Android Studio (version 3.5) 再次运行此命令 1flutter doctor --android-licenses 凡是见到以下命令出现,都输入y并回车 以下都是可以忽略的问题 ❗ IntelliJ IDEA Ultimate Edition (version 2019.1) 提醒你该ide没有安装flutter、Dart插件.反正已经安装了Android Studio,不用管 ❗ Connected device 提醒你当前没有可以使用的真机和虚拟机可用","categories":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://hake196.github.io/categories/环境搭建/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://hake196.github.io/tags/环境搭建/"},{"name":"Flutter","slug":"Flutter","permalink":"https://hake196.github.io/tags/Flutter/"}]},{"title":"Adb与Monkey命令的简单使用","slug":"Adb与Monkey命令的简单使用","date":"2019-09-13T08:51:50.000Z","updated":"2019-09-17T11:46:37.630Z","comments":true,"path":"2019/09/13/Adb与Monkey命令的简单使用/","link":"","permalink":"https://hake196.github.io/2019/09/13/Adb与Monkey命令的简单使用/","excerpt":"","text":"Monkey命令效果展示 Adb命令 显示Android设备 1adb devices 连接Android设备 1adb connect &lt;设备ip&gt; 断开Android设备 1adb disconnect &lt;设备ip&gt; 安装app 1adb install &lt;app文件路径&gt; 从手机推送文件到电脑 1adb pull &lt;手机文件路径&gt; &lt;电脑存放的路径&gt; 列出手机所有的包名 (后面可加参数 ) 例: -3 显示第三方包名 1adb shell pm list packages 列出手机的日志(有日志等级,后面可带参数) 1adb logcat 用adb shell进入data目录列出包名 123adb shellcd /data/datals 停止/启动 adb 命令 12adb kill-serveradb start-server Monkey命令使用前需搭建好环境 Java Jdk Android Sdk Monkey压力测试 (Monkey模拟人在手机屏幕上胡乱的触摸，考验真机或程序是否稳定) 使用前打开安卓模拟器或者USB连接真机(需要在安卓系统打开调试模式) adb connect命令连接设备 夜神模拟器连接需要cmd进入模拟器的安装目录，输入nox_adb.exe connect 127.0.0.1:62001即可成功连接 Monkey命令使用示范 1adb shell monkey -p com.tenent.mm -v -v -v 5000 1.参数 -p &lt;包名&gt; (忽略此参数可直接在后面加上随机测试次数) 1adb shell monkey -v -v -v 5000 2.参数 -v 表示输出的日志详细度,-v越多日志就越详细,最多三个. 3.后面的数字代表随机测试次数,可按需求设置. 4.Monkey命令输出的日志可以输出到某个txt文件,格式为Monkey名令+空格+&gt;+空格+&lt;想输出的目录地址&gt;,adb logcat也可以,例 : 1adb shell monkey -p com.tenent.mm -v -v -v 5000 &gt; d:\\adb_log.txt 1adb logcat &gt; d:\\logcat.txt 详细资料: https://blog.csdn.net/zhangmeng1314/article/details/82699316 https://www.cnblogs.com/kekouwen/archive/2018/11/21/9995635.html","categories":[{"name":"自动化测试","slug":"自动化测试","permalink":"https://hake196.github.io/categories/自动化测试/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://hake196.github.io/tags/Android/"},{"name":"自动化测试","slug":"自动化测试","permalink":"https://hake196.github.io/tags/自动化测试/"}]},{"title":"Android-SDK环境配置","slug":"Android-SDK环境配置","date":"2019-09-12T01:25:01.000Z","updated":"2019-09-13T08:52:15.321Z","comments":true,"path":"2019/09/12/Android-SDK环境配置/","link":"","permalink":"https://hake196.github.io/2019/09/12/Android-SDK环境配置/","excerpt":"","text":"Android Sdk环境搭建(Win10平台)安装Java Jdk(忽略)下载Android Sdk.exe安装包 使用Ping检测工具 查找dl.google.com和dl-ssl.google.com这两个网址 ping值不超时的ip 填入host文件,保存 进入Android sdk根目录中打开sdk manager.exe 选择要安装的包 必须选 Android 版本按需求选 安装 点击Intall …… 按钮 选择同意选框,然后安装 安装完成后添加环境变量需要添加两个变量,一个是sdk安装的根目录,另一个是sdk目录下的platform目录(adb工具的存放点) 新建一个环境变量 在path变量中添加两个变量 测试Android-SDK环境命令提示符中输入adb命令,成功效果如下：","categories":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://hake196.github.io/categories/环境搭建/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://hake196.github.io/tags/Android/"},{"name":"水文一篇","slug":"水文一篇","permalink":"https://hake196.github.io/tags/水文一篇/"},{"name":"环境搭建","slug":"环境搭建","permalink":"https://hake196.github.io/tags/环境搭建/"}]},{"title":"Selenium基础","slug":"Selenium基础","date":"2019-09-10T02:22:36.000Z","updated":"2019-09-13T15:53:57.961Z","comments":true,"path":"2019/09/10/Selenium基础/","link":"","permalink":"https://hake196.github.io/2019/09/10/Selenium基础/","excerpt":"","text":"Selenium基础脚本展示 代码123456789101112131415161718192021222324# 执行此代码前，先下载好Google Chrome的Webdriver# webdriver文件放入Python安装目录下# 引入时间包，在需要缓慢加载页面的地方暂时停止import time# 关键的webdriver包，控制驱动打开chrome浏览器的关键from selenium import webdriver# 模拟键盘输入的Selenium包from selenium.webdriver.common.kes# 打开Chromeb = webdriver.Chrome# 模拟键盘在地址栏中输入百度地址b.get(&quot;http://www.baidu.com&quot;)# 查找搜索框的id元素# send_keys() 模仿键盘输入关键字b.find_element_by_id(&quot;ky&quot;).send_keys(&quot;bilibili&quot;)# click() 模拟鼠标左击b.find_element_by_id(&quot;su&quot;).click()# 等待5秒后再执行后面的代码time.sleep(5)# 通过xpath方法查找关联的元素b.find_element_by_xpath(&quot;\\\\h3@[class=&apos;t&apos;]/a&quot;).clicktime.sleep(5)# 关闭浏览器b.quit() 浏览器动作启动浏览器webdriver.Chrome()1webdriver.Chrome() 浏览器地址栏输入地址get()12b = webdriver.Chrome()b.get(&quot;https://www.baidu.com&quot;) 关闭浏览器quit()12b = webdriver.Chrome()b.quit() 返回back()1234b = webdriver.Chrome()b.get(&quot;https://www.baidu.com&quot;)b.find_element_by_link_text(&quot;贴吧&quot;).click()b.back() 前进forword()12345b = webdriver.Chrome()b.find_element_by_link_text(&quot;贴吧&quot;).click()b.back()time.sleep(5)b.forward() 刷新refresh()123b = webdriver.Chrome()b.get(&quot;https://www.baidu.com&quot;)b.refresh() 页面都可以刷新 鼠标点击行为(常用)鼠标左击(前提是找到元素)click()1b.find_by_link_text(&quot;贴吧&quot;).click() 元素查找123456find_element_by_id()find_element_by_class()find_element_by_name()find_element_by_xpath()find_element_by_link_text()。。。 键盘事件clear()1b.find_element_by_id(&quot;kw&quot;).clear() 清除搜索框的内容 send.keys() 12345send.keys(Keys.ENTER) 回车send.keys(Keys.CONTROL+&quot;A&quot;) 全选send.heys(Keys.CONTROL+&quot;S&quot;) 保存send.heys(Keys.CONTROL+&quot;Z&quot;) 撤销。。。 参考资料：https://www.jianshu.com/p/1531e12f8852","categories":[{"name":"自动化测试","slug":"自动化测试","permalink":"https://hake196.github.io/categories/自动化测试/"}],"tags":[{"name":"Selenium","slug":"Selenium","permalink":"https://hake196.github.io/tags/Selenium/"},{"name":"自动化测试","slug":"自动化测试","permalink":"https://hake196.github.io/tags/自动化测试/"}]},{"title":"Python+Selenium环境搭建","slug":"Python-Selenium环境搭建","date":"2019-09-09T08:15:38.000Z","updated":"2019-09-12T03:00:12.648Z","comments":true,"path":"2019/09/09/Python-Selenium环境搭建/","link":"","permalink":"https://hake196.github.io/2019/09/09/Python-Selenium环境搭建/","excerpt":"","text":"Python环境搭建1. 官网下载安装包 2. 下载好安装包后双击安装3. 勾选Add Python 3.7…… 选项，添加python环境变量，下一步…… 4. 检查Python环境键盘处输入win+r组合键，输入cmd后回车，在光标处输入python。一般在环境变量中添加两个目录变量就可以了(一个是python安装目录，另一个是python安装根目录下的Script目录，后者目录是配置pip包管理工具用的) Selenium安装5. 测试下pip 6. 安装Selenium输入pip install selenium，安装selenium包 7. pip -V 命令检查pip版本安装不顺利，pip版本不符合要求，根据系统提示输入命令更新pip Pycharm8. python+selenium环境搭建完成，个人推荐使用pycharm ide 编译py文件较舒服","categories":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://hake196.github.io/categories/环境搭建/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://hake196.github.io/tags/Python/"},{"name":"Selenium","slug":"Selenium","permalink":"https://hake196.github.io/tags/Selenium/"},{"name":"自动化测试","slug":"自动化测试","permalink":"https://hake196.github.io/tags/自动化测试/"},{"name":"Web测试","slug":"Web测试","permalink":"https://hake196.github.io/tags/Web测试/"}]}]}